name: Build and Test Web Service
on:
  pull_request:
    branches: [ main ]
jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build Docker Image
        run: |
          docker build -t t500-aggregator .
  pytest:
    name: Run Pytest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v3

      - name: Install Actions Depenency
        run: npm install @actions/github; npm install @octokit/rest

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: pip install poetry==1.3.2; poetry install --with=dev

      - name: Run Pytest & Generate Coverage Report
        run: poetry run pytest --cov --cov-report html
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload report as comment
        uses: actions/upload-artifact@v2
        with:
          name: pytest-report
          path: htmlcov/
        
      - name: Post comment with report
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { Octokit } = require("@octokit/rest");
            const { fs } = require("fs");
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

            const { owner, repo, number } = context.issue;
            const { data: report } = await readFile("./htmlcov/index.html", "utf8");
            await octokit.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: `**Test Coverage Report**
              \`\`\`html\n${report}\n\`\`\``
              });
